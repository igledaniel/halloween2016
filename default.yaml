import:
    - https://tangrams.github.io/blocks/global.yaml
    - https://tangrams.github.io/blocks/filter/height.yaml
    - https://tangrams.github.io/blocks/patterns/stripes.yaml
    - https://tangrams.github.io/blocks/filter/grain.yaml
    - https://tangrams.github.io/blocks/space/constant.yaml
    - https://tangrams.github.io/blocks/space/screen.yaml

sources:
    mapzen:
        type: TopoJSON
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-VyYjZGS
        rasters: [normals]
        max_zoom: 16
    normals: 
        type: Raster
        url: https://tile.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png?api_key=vector-tiles-VyYjZGS
        max_zoom: 15
fonts:
    Montserrat:
      url: fonts/Montserrat-Regular.ttf
    Creepster:
      url: fonts/Creepster-Regular.ttf
cameras:
    cam:
        type: perspective

lights:
    dir:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5

scene:
    background:
      color: grey

layers:
    water:
        data: { source: mapzen }
        filter:
          not:
            - boundary: true
            - kind: playa
        draw:
            waves:
                order: function() { return feature.sort_rank; }
                cap: round
                width: 8px
                color: [0.502, 0.486, 0.486, 1.00]
                width: 5px
    landuse:
        data: { source: mapzen }
        draw:
            landuse:
                color: rgb(99,27,24)
                order: function() { return feature.sort_rank; }
    earth:
        data: { source: mapzen }
        filter: { not: { boundary: true } }
        draw:
            terrain:
                order: function() { return feature.sort_rank; }
    boundaries:
        data: { source: mapzen }
        filter:
          not:
            - kind_detail: 6
            - kind_detail: 8
            - kind: locality
            - kind: county
            - maritime_boundary: true
        draw:
            dots:
                order: function() { return feature.sort_rank; }
                visible: global.lines
                color: '#B22C18'
                width: 1.8px
    places:
        data: { source: mapzen }
        filter: { not: { kind: [neighbourhood] } }
        countries:
            filter: { kind: country, population: { min: 3500000 } }
            draw:
                text:
                  text_source: function() { return feature["name:en"] || feature["name"]; }
                  font:
                    family: Creepster
                    size: 30px
                    fill: '#B82D18'
        cities:
            filter:
                - { $zoom: [6], population: { min: 2500000 }}
                - { $zoom: [7], population: { min: 1500000 } }
                - { $zoom: [8], min_zoom < 8, kind_detail: city }
                - { $zoom: [9], min_zoom < 9, kind_detail: city }
                - { $zoom: [10], min_zoom < 10, kind_detail: city }
            draw:
                text:
                  font:
                    family: Creepster
                    size: 24px
                    fill: '#962825'
                    stroke: { color: [.185,.118,.038], width: 3}
        states:
            filter:
                - kind_detail: state
            draw:
                text:
                  font:
                    family: Creepster
                    size: [[6, 12px], [7,24px], [8, 36px], [9, 44px]]
                    fill: '#FF7A12'
                    stroke: { color: [.155,.155,.155], width: 3}
    roads:
        data: { source: mapzen }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: function() { return feature.sort_rank; }
                color: [0.988, 0.988, 0.988]
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                roads:
                    order: function() { return feature.sort_rank; }
                    width: [[8,0px], [8,.25px], [11, 1.5px], [14, 2px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    roads:
                        width: [[8,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
        tunnel:
            filter: {is_tunnel: true }
            draw:
                roads:
                  order: function() { return feature.sort_rank; }
    buildings:
        data: { source: mapzen }
        draw:
            buildings:
                order: function() { return feature.sort_rank; }
                color: '#999'
                extrude: true
styles:
    palette:
        shaders:
            blocks:
                global: |
                    float radio = 0.05;
                    vec2 size = vec2(1.,.6);
                    vec3 background = vec3(1.);
                    vec3 midle = vec3(0.824, 0.812, 0.804);
                    vec3 foreground = vec3(0.275,0.298,0.251);
    roads:
        base: lines
        lighting: false
    buildings:
        base: polygons
        mix: [filter-height]
    dots:
        base: lines
        dash: [1, 2]
    terrain:
        base: polygons
        lighting: false
        # mix: [grid]
        raster: normal
        shaders:
            uniforms:
                u_scale: 1 # higher values are more exaggerated
                u_envmap: img/sphere-map2.png
            blocks:
                global: |
                    vec4 terrainEnvmap (in sampler2D _tex, in vec3 _normal) {
                        const vec3 eye = vec3(0.,0.,-1.);
                        vec3 r = reflect(eye, _normal);
                        r.z += 1.0;
                        float m = 2. * length(r);
                        vec2 uv = r.xy / m + .5;
                        return texture2D(_tex, uv);
                    }
                color: |
                    // color = v_color;
                    normal.z /= u_scale; // turn terrain exaggeration up/down
                    normal = normalize(normal);
                    color = terrainEnvmap(u_envmap, normal);

                    // color *= v_color; // apply layer color to envmap
    waves:
        base: polygons
        mix: [space-constant, patterns-stripes]
        shaders:
            defines:
                COLOR1: vec3(0.25, 0.25, 0.25)
                COLOR2: vec3(0.69, .69, .69)
            blocks:
                global: |
                    float stripes2(vec2 st){
                        return step(.3,1.0-smoothstep(.5,1.,abs(sin(st.y*3.14159265358))));
                    }
                filter: |
                    vec2 st = getConstantCoords();

                    const float wave_width = 30.0;
                    const float wave_height = .01;
                    st.y += sin(st.x*wave_width)*wave_height;

                    // gradient
                    color.rgb = mix(COLOR1, color.rgb, gl_FragCoord.x / u_resolution.x);
                    color = mix(color,vec4(COLOR2,1.0),stripes(st*92.,.5))*1.0;
    landuse:
        base: polygons
        mix: [patterns-stripes, space-constant]
        blend: inlay
        shaders:
            defines:
                GRAIN_AMOUNT: 2.
                NUM_OCTAVES: 2
            blocks:
                color: |
                    color = mix(color,vec4(0.),diagonalStripes( getConstantCoords()*33.))*.8;
